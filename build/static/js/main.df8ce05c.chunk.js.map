{"version":3,"sources":["constants.ts","components/apollo.ts","a_atoms/Button2.tsx","hooks/useMe.tsx","a_pages/TodoList/index.tsx","routers/logged-in-router.tsx","a_atoms/Button.tsx","a_atoms/Form-error.tsx","a_pages/CreateAccount.tsx","a_pages/Login.tsx","routers/logged-out-router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOCALSTORAGE_TOKEN","token","localStorage","getItem","isLoggedInVar","makeVar","Boolean","authTokenVar","httpLink","createHttpLink","uri","authLink","setContext","_","headers","client","ApolloClient","link","concat","cache","InMemoryCache","typePolicies","Query","fields","isLoggedIn","read","Button2","canClick","actionText","loading","className","ME_QUERY","gql","CREATECHECKLIST_MUTATION","ALLCHECKLISTS_QUERY","EDITCHECKLIST_MUTATION","DELETECHECKLIST_MUTATION","TodoLIst","useQuery","meData","data","meLoading","checkListData","checkListLoading","ckecklistRefetch","refetch","useForm","mode","register","handleSubmit","getValues","formState","reset","onCompleted","useMutation","createCheckListMutation","editCheckListMutation","deleteCheckListMutation","useState","allCheckLists","checkLists","map","val","value","newCheckListData","setNewCheckListData","title","isClicked","tabData","setTabData","useEffect","newCheckList","slice","length","profit","difficulty","urgency","checkListSorted_complete","filter","ele","checked","checkListSorted_create","checkListSorted_profit","sort","a","b","checkListSorted_difficulty","checkListSorted_urgency","checkListSorted_value","sortState","indexOf","me","email","onClick","removeItem","onSubmit","variables","createCheckListInput","required","placeholder","type","min","max","isValid","idx","listVal","listIdx","tabDataTogle","style","width","checkListId","id","editCheckListInput","deleteCheckListInput","LoggedInRouter","path","Button","FormError","errorMessage","CREATE_ACCOUNT_MUTATION","CreateAccount","errors","history","useHistory","createAccount","ok","push","createAccountMutation","createAccountMutationResult","Helmet","password","createAccountInput","pattern","message","error","to","LOGIN_MUTATION","Login","login","setItem","loginMutation","loginMutationResult","loginInput","LoggedOutRouter","App","useReactiveVar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.df8ce05c.chunk.js","sourcesContent":["export const LOCALSTORAGE_TOKEN = \"token\";\n","import {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  makeVar,\n} from \"@apollo/client\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst token = localStorage.getItem(LOCALSTORAGE_TOKEN);\n\nexport const isLoggedInVar = makeVar(Boolean(token));\nexport const authTokenVar = makeVar(token);\n\nconst httpLink = createHttpLink({\n  uri: \"https://rank-todo-back.poketing.com/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"x-jwt\": authTokenVar() || \"\",\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          isLoggedIn: {\n            read() {\n              return isLoggedInVar();\n            },\n          },\n          token: {\n            read() {\n              return authTokenVar();\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","import React from \"react\";\n\ninterface IButtonProps {\n  canClick: boolean;\n  loading: boolean;\n  actionText: string;\n}\n\nexport const Button2: React.FC<IButtonProps> = ({\n  canClick,\n  loading,\n  actionText,\n}) => (\n  <button\n    className={`text-lg font-medium focus:outline-none text-white py-3  px-4  transition-colors ${\n      canClick\n        ? \"bg-blue-400 hover:bg-blue-500\"\n        : \"bg-gray-300 pointer-events-none \"\n    }`}\n  >\n    {loading ? actionText : actionText}\n  </button>\n);\n","import { gql, useQuery } from \"@apollo/client\";\nimport { meQuery } from \"../__generated__/meQuery\";\n\nconst ME_QUERY = gql`\n  query meQuery {\n    me {\n      id\n      email\n    }\n  }\n`;\n\nexport const useMe = () => {\n  return useQuery<meQuery>(ME_QUERY);\n};\n","import { gql, useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Button2 } from \"/home/app/src/a_atoms/Button2\";\nimport { LOCALSTORAGE_TOKEN } from \"/home/app/src/constants\";\nimport { useMe } from \"/home/app/src/hooks/useMe\";\nimport { allCheckListsQuery } from \"/home/app/src/__generated__/allCheckListsQuery\";\nimport {\n  createCheckListMutation,\n  createCheckListMutationVariables,\n} from \"/home/app/src/__generated__/createCheckListMutation\";\nimport { authTokenVar, isLoggedInVar } from \"/home/app/src/components/apollo\";\n\nimport {\n  editCheckListMutation,\n  editCheckListMutationVariables,\n} from \"/home/app/src/__generated__/editCheckListMutation\";\n\nimport {\n  deleteCheckListMutation,\n  deleteCheckListMutationVariables,\n} from \"/home/app/src/__generated__/deleteCheckListMutation\";\nimport { validate } from \"graphql\";\n\n// 그래프큐엘 쿼리\nconst CREATECHECKLIST_MUTATION = gql`\n  mutation createCheckListMutation(\n    $createCheckListInput: CreateCheckListInput!\n  ) {\n    createCheckList(input: $createCheckListInput) {\n      ok\n      error\n    }\n  }\n`;\nconst ALLCHECKLISTS_QUERY = gql`\n  query allCheckListsQuery {\n    allCheckLists {\n      error\n      ok\n      checkLists {\n        id\n        title\n        checked\n        profit\n        difficulty\n        urgency\n      }\n    }\n  }\n`;\nconst EDITCHECKLIST_MUTATION = gql`\n  mutation editCheckListMutation($editCheckListInput: EditCheckListInput!) {\n    editCheckList(input: $editCheckListInput) {\n      ok\n      error\n    }\n  }\n`;\nconst DELETECHECKLIST_MUTATION = gql`\n  mutation deleteCheckListMutation(\n    $deleteCheckListInput: DeleteCheckListInput!\n  ) {\n    deleteCheckList(input: $deleteCheckListInput) {\n      ok\n      error\n    }\n  }\n`;\n\n// 폼타입\ninterface CreateTodoForm {\n  title: string;\n  profit: number;\n  difficulty: number;\n  urgency: number;\n}\n\nexport const TodoLIst = () => {\n  // 리스트 쿼리 가져오기\n  const { data: meData, loading: meLoading } = useMe();\n  const {\n    data: checkListData,\n    loading: checkListLoading,\n    refetch: ckecklistRefetch,\n  } = useQuery<allCheckListsQuery>(ALLCHECKLISTS_QUERY);\n\n  // 유즈폼\n  const { register, handleSubmit, getValues, formState, reset } =\n    useForm<CreateTodoForm>({\n      mode: \"onChange\",\n    });\n\n  // 리스트 생성 뮤태이션\n  const onCompleted = () => {\n    ckecklistRefetch();\n  };\n  const [createCheckListMutation, { data: createCheckListResult }] =\n    useMutation<createCheckListMutation, createCheckListMutationVariables>(\n      CREATECHECKLIST_MUTATION,\n      {\n        onCompleted,\n      }\n    );\n  const onSubmit = () => {\n    const { title, profit, difficulty, urgency } = getValues();\n    createCheckListMutation({\n      variables: {\n        createCheckListInput: {\n          title,\n          profit: +profit,\n          difficulty: +difficulty,\n          urgency: +urgency,\n        },\n      },\n    });\n    reset();\n  };\n\n  // 리스트 수정 뮤태이션\n  const [editCheckListMutation, { data: editCheckListResult }] = useMutation<\n    editCheckListMutation,\n    editCheckListMutationVariables\n  >(EDITCHECKLIST_MUTATION, {\n    onCompleted,\n  });\n\n  const listCheckToggle = (checkListId: number, checked: boolean) => {\n    if (checked) {\n      editCheckListMutation({\n        variables: {\n          editCheckListInput: {\n            checkListId,\n            checked: false,\n          },\n        },\n      });\n    } else {\n      editCheckListMutation({\n        variables: {\n          editCheckListInput: {\n            checkListId,\n            checked: true,\n          },\n        },\n      });\n    }\n  };\n\n  // 리스트 삭제 뮤태이션\n  const [deleteCheckListMutation, { data: deleteCheckListResult }] =\n    useMutation<deleteCheckListMutation, deleteCheckListMutationVariables>(\n      DELETECHECKLIST_MUTATION,\n      {\n        onCompleted,\n      }\n    );\n\n  // 정렬 로직\n  const [newCheckListData, setNewCheckListData] = useState(\n    checkListData?.allCheckLists.checkLists?.map((val) => ({\n      ...val,\n      value: 0,\n    }))\n  );\n\n  const [tabData, setTabData] = useState([\n    { title: \"완료됨\", isClicked: false },\n    { title: \"생성순\", isClicked: true },\n    { title: \"예상이익순\", isClicked: false },\n    { title: \"쉬움정도순\", isClicked: false },\n    { title: \"긴급도순\", isClicked: false },\n    { title: \"우선순위순\", isClicked: false },\n  ]);\n\n  useEffect(() => {\n    const newCheckList = checkListData?.allCheckLists.checkLists\n      ?.slice(0, checkListData?.allCheckLists.checkLists?.length)\n      .map((val) => ({\n        ...val,\n        value: val.profit + val.difficulty + val.urgency,\n      }));\n\n    const checkListSorted_complete = newCheckList?.filter((ele) => ele.checked);\n\n    const checkListSorted_create = newCheckList?.filter((ele) => !ele.checked);\n\n    const checkListSorted_profit = newCheckList\n      ?.sort((a, b) => (a.profit > b.profit ? -1 : a.profit < b.profit ? 1 : 0))\n      .filter((ele) => !ele.checked);\n    const checkListSorted_difficulty = newCheckList\n      ?.sort((a, b) =>\n        a.difficulty > b.difficulty ? -1 : a.difficulty < b.difficulty ? 1 : 0\n      )\n      .filter((ele) => !ele.checked);\n\n    const checkListSorted_urgency = newCheckList\n      ?.sort((a, b) =>\n        a.urgency > b.urgency ? -1 : a.urgency < b.urgency ? 1 : 0\n      )\n      .filter((ele) => !ele.checked);\n    const checkListSorted_value = newCheckList\n      ?.sort((a, b) => (a.value > b.value ? -1 : a.value < b.value ? 1 : 0))\n      .filter((ele) => !ele.checked);\n\n    const sortState = tabData\n      .map((val) => {\n        return val.isClicked;\n      })\n      .indexOf(true);\n\n    if (sortState === 0) {\n      setNewCheckListData(checkListSorted_complete);\n    } else if (sortState === 1) {\n      setNewCheckListData(checkListSorted_create);\n    } else if (sortState === 2) {\n      setNewCheckListData(checkListSorted_profit);\n    } else if (sortState === 3) {\n      setNewCheckListData(checkListSorted_difficulty);\n    } else if (sortState === 4) {\n      setNewCheckListData(checkListSorted_urgency);\n    } else if (sortState === 5) {\n      setNewCheckListData(checkListSorted_value);\n    }\n  }, [checkListData, checkListLoading, tabData]);\n\n  const tabDataTogle = (idx: any) => {\n    setTabData(\n      tabData.map((listVal, listIdx) => {\n        return listIdx === idx\n          ? { ...listVal, isClicked: true }\n          : { ...listVal, isClicked: false };\n      })\n    );\n  };\n\n  return (\n    <section>\n      <div className=\"mt-2 mb-10 flex gap-4 justify-end mr-6 text-gray-900\">\n        <h1>{meData?.me.email}</h1>\n        <button\n          onClick={() => {\n            localStorage.removeItem(LOCALSTORAGE_TOKEN);\n            authTokenVar(\"\");\n            isLoggedInVar(false);\n          }}\n        >\n          로그아웃\n        </button>\n      </div>\n      {/* 로고 */}\n      <div className=\"flex justify-center items-center\">\n        <div className=\"text-5xl font-black mb-4\">\n          <span className=\"text-blue-500\">Ranking</span>{\" \"}\n          <span className=\"text-gray-900\">Todo</span>\n        </div>\n      </div>\n      {/* 입력창 */}\n      <div className=\"flex justify-center mt-12\">\n        <form onSubmit={handleSubmit(onSubmit)} className=\"flex gap-x-2 \">\n          <input\n            {...register(\"title\", {\n              required: \"제목을 입력해야합니다 \",\n            })}\n            required\n            placeholder=\"할일\"\n            className=\"input w-96\"\n          />\n          <input\n            {...register(\"profit\")}\n            type=\"number\"\n            placeholder=\"예상이익\"\n            min=\"0\"\n            max=\"10\"\n            className=\"inputSmall w-24\"\n          />\n          <input\n            {...register(\"difficulty\")}\n            type=\"number\"\n            placeholder=\"쉬움정도\"\n            min=\"0\"\n            max=\"10\"\n            className=\"inputSmall w-24\"\n          />\n          <input\n            {...register(\"urgency\")}\n            type=\"number\"\n            placeholder=\"긴급도\"\n            min=\"0\"\n            max=\"10\"\n            className=\"inputSmall w-24\"\n          />\n\n          <Button2\n            canClick={formState.isValid}\n            loading={meLoading}\n            actionText={\"등록\"}\n          />\n        </form>\n      </div>\n      <div>\n        <div className=\" max-w-screen-md mx-auto flex justify-end mt-2 text-gray-400\">\n          랭킹 수치는 1부터 10까지 입력가능합니다.\n        </div>\n      </div>\n      {/* 리스트섹션  */}\n      <div className=\" max-w-screen-md mx-auto  mt-10 text-lg pr-12\">\n        {/* 정렬제목 */}\n        <ul className=\"flex justify-end gap-x-2\">\n          {tabData.map((val, idx) => (\n            <li\n              className={`cursor-pointer rounded px-2 py-1 transition duration-100 ${\n                val.isClicked ? \"bg-blue-400 text-white font-bold\" : \"\"\n              }`}\n              onClick={() => {\n                tabDataTogle(idx);\n              }}\n            >\n              {val.title}\n            </li>\n          ))}\n        </ul>\n      </div>\n      {/* 리스트 */}\n      <ul className=\"flex flex-col items-center text-lg mt-6 mb-10 gap-4\">\n        {newCheckListData?.map((val) => (\n          <li\n            className=\"flex justify-center\"\n            key={val.id}\n            style={{ width: \"50rem\" }}\n          >\n            <div className=\"flex w-full\">\n              <div className=\"flex gap-5 border px-4  rounded-md \">\n                <div\n                  className=\"w-10 cursor-pointer flex justify-center\"\n                  onClick={() => {\n                    listCheckToggle(val.id, Boolean(val.checked));\n                  }}\n                >\n                  {\" \"}\n                  {val.checked ? (\n                    <i className=\"far fa-check-circle flex justify-center items-center text-2xl pt-px text-gray-700\"></i>\n                  ) : (\n                    <i className=\"far fa-circle flex justify-center items-center text-2xl pt-px text-gray-700\"></i>\n                  )}\n                </div>\n                <div className=\"w-80 mr-20  py-3 flex items-center \">\n                  {\" \"}\n                  {val.title}\n                </div>\n                <div className=\"flex flex-col items-end py-2 mr-3\">\n                  <div className=\"w-24 flex justify-end font-bold text-blue-600 text-base\">\n                    가치: {val.value}\n                  </div>\n                  <div className=\"flex justify-end gap-x-3 text-sm text-gray-600 w-60\">\n                    <div>예상이익: {val.profit}</div>\n                    <div>쉬움정도: {val.difficulty}</div>\n                    <div>긴급도: {val.urgency}</div>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"flex juce items-center cursor-pointer\"\n                onClick={() => {\n                  deleteCheckListMutation({\n                    variables: {\n                      deleteCheckListInput: {\n                        checkListId: val.id,\n                      },\n                    },\n                  });\n                }}\n              >\n                <i className=\"far fa-trash-alt flex justify-center items-center text-xl pt-px text-gray-700 px-3\"></i>\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { TodoLIst } from \"/home/app/src/a_pages/TodoList\";\n\nexport function LoggedInRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <TodoLIst />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import React from \"react\";\n\ninterface IButtonProps {\n  canClick: boolean;\n  loading: boolean;\n  actionText: string;\n}\n\nexport const Button: React.FC<IButtonProps> = ({\n  canClick,\n  loading,\n  actionText,\n}) => (\n  <button\n    className={`text-lg font-medium focus:outline-none text-white py-4  transition-colors ${\n      canClick\n        ? \"bg-blue-400 hover:bg-blue-500\"\n        : \"bg-gray-300 pointer-events-none \"\n    }`}\n  >\n    {loading ? actionText : actionText}\n  </button>\n);\n","import React from \"react\";\n\ninterface IFormErrorProps {\n  errorMessage: string;\n}\n\nexport const FormError: React.FC<IFormErrorProps> = ({ errorMessage }) => (\n  <span className=\"font-medium text-red-500\">{errorMessage}</span>\n);\n","import { gql, useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useForm } from \"react-hook-form\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button } from \"../a_atoms/Button\";\nimport { FormError } from \"../a_atoms/Form-error\";\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from \"../__generated__/createAccountMutation\";\n\nconst CREATE_ACCOUNT_MUTATION = gql`\n  mutation createAccountMutation($createAccountInput: CreateAccountInput!) {\n    createAccount(input: $createAccountInput) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface ICreateAccountForm {\n  email: string;\n  password: string;\n}\n\nexport const CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    handleSubmit,\n    formState,\n    formState: { errors },\n  } = useForm<ICreateAccountForm>({\n    mode: \"onChange\",\n  });\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      history.push(\"/login\");\n    }\n  };\n  const [\n    createAccountMutation,\n    { loading, data: createAccountMutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTATION,\n    {\n      onCompleted,\n    }\n  );\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      createAccountMutation({\n        variables: {\n          createAccountInput: { email, password },\n        },\n      });\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n      <Helmet>\n        <title>Create Account | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col px-5 items-center\">\n        <div className=\"text-5xl font-black mb-10\">\n          <span className=\"text-blue-500\">Ranking</span>{\" \"}\n          <span className=\"text-gray-900\">Todo</span>\n        </div>\n        <h4 className=\"w-full font-medium text-left text-2xl mb-2\">\n          회원가입하고 랭킹투두를 시작해보세요!\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            {...register(\"email\", {\n              required: \"Email is required\",\n              pattern:\n                /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            })}\n            required\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"input\"\n          />\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          {errors.email?.type === \"pattern\" && (\n            <FormError errorMessage={\"Please enter a valid email\"} />\n          )}\n          <input\n            {...register(\"password\", { required: \"Password is required\" })}\n            required\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"input\"\n          />\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          {errors.password?.type === \"minLength\" && (\n            <FormError errorMessage=\"Password must be more than 10 chars.\" />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText={\"Create Account\"}\n          />\n          {createAccountMutationResult?.createAccount.error && (\n            <FormError\n              errorMessage={createAccountMutationResult.createAccount.error}\n            />\n          )}\n        </form>\n        <div>\n          이미 계정이 있으신가요?{\" \"}\n          <Link to=\"/login\" className=\"text-blue-600 hover:underline\">\n            로그인 하러 가기 →\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useForm } from \"react-hook-form\";\nimport { authTokenVar, isLoggedInVar } from \"../components/apollo\";\nimport Helmet from \"react-helmet\";\n\nimport {\n  loginMutation,\n  loginMutationVariables,\n} from \"/home/app/src/__generated__/loginMutation\";\nimport { FormError } from \"../a_atoms/Form-error\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"../a_atoms/Button\";\nimport { LOCALSTORAGE_TOKEN } from \"../constants\";\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\nconst LOGIN_MUTATION = gql`\n  mutation loginMutation($loginInput: LoginInput!) {\n    login(input: $loginInput) {\n      ok\n      error\n      token\n    }\n  }\n`;\n\nexport const Login = () => {\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    formState,\n    formState: { errors },\n  } = useForm<LoginForm>({\n    mode: \"onChange\",\n  });\n\n  const onCompleted = (data: loginMutation) => {\n    const {\n      login: { ok, token },\n    } = data;\n    if (ok && token) {\n      localStorage.setItem(LOCALSTORAGE_TOKEN, token);\n      authTokenVar(token);\n      isLoggedInVar(true);\n    }\n  };\n\n  const [loginMutation, { data: loginMutationResult, loading }] = useMutation<\n    loginMutation,\n    loginMutationVariables\n  >(LOGIN_MUTATION, {\n    onCompleted,\n  });\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password } = getValues();\n      loginMutation({\n        variables: {\n          loginInput: {\n            email,\n            password,\n          },\n        },\n      });\n    }\n  };\n  return (\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n      <Helmet>\n        <title>Login | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col px-5 items-center\">\n        <div className=\"text-5xl font-black mb-10\">\n          <span className=\"text-blue-500\">Ranking</span>{\" \"}\n          <span className=\"text-gray-900\">Todo</span>\n        </div>\n        {/* <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          환영합니다\n        </h4> */}\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            {...register(\"email\", {\n              required: \"Email is required\",\n            })}\n            required\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"input\"\n          />\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          {errors.email?.type === \"pattern\" && (\n            <FormError errorMessage={\"Please enter a valid email\"} />\n          )}\n          <input\n            {...register(\"password\", { required: \"Password is required\" })}\n            required\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"input\"\n          />\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          {errors.password?.type === \"minLength\" && (\n            <FormError errorMessage=\"Password must be more than 10 chars.\" />\n          )}\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText={\"Log in\"}\n          />\n          {loginMutationResult?.login.error && (\n            <FormError errorMessage={loginMutationResult.login.error} />\n          )}\n        </form>\n        <div>\n          랭킹 투두가 처음이신가요?{\" \"}\n          <Link to=\"/create-account\" className=\"text-blue-600 hover:underline\">\n            회원가입 하러가기 →\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { CreateAccount } from \"/home/app/src/a_pages/CreateAccount\";\nimport { Login } from \"/home/app/src/a_pages/Login\";\n\nexport function LoggedOutRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/create-account\">\n          <CreateAccount />\n        </Route>\n        <Route path=\"/\">\n          <Login />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","import { useReactiveVar } from \"@apollo/client\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { isLoggedInVar } from \"./components/apollo\";\nimport { LoggedInRouter } from \"./routers/logged-in-router\";\nimport { LoggedOutRouter } from \"./routers/logged-out-router\";\n\nfunction App() {\n  const isLoggedIn = useReactiveVar(isLoggedInVar);\n  return isLoggedIn ? <LoggedInRouter /> : <LoggedOutRouter />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./components/apollo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}